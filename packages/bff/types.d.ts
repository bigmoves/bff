import type { Agent } from "@atproto/api";
import type { DidResolver } from "@atproto/identity";
import type { AtprotoOAuthClient } from "@bigmoves/atproto-oauth-client";
import type { DatabaseSync } from "node:sqlite";
import type { ComponentChildren, FunctionComponent, VNode } from "preact";

export type Database = DatabaseSync;

export type ActorTable = {
  did: string;
  handle: string;
  indexedAt: string;
};

export type RecordTable = {
  uri: string;
  cid: string;
  did: string;
  collection: string;
  json: string;
  indexedAt: string;
};

export type RecordMeta = {
  indexedAt: string;
  cid: string;
  did: string;
  uri: string;
};

export type WithBffMeta<T> = T & RecordMeta;

export type BffMiddleware = (
  req: Request,
  ctx: BffContext,
) => Promise<Response>;

type RootElement = <T extends Record<string, unknown>>(
  props: RootProps<T>,
) => preact.VNode;

export type BffOptions = {
  /** The name of the app, used for OAuth */
  appName: string;
  /** The URL of the Jetstream server */
  jetstreamUrl?: string;
  /** Collections to index from the firehose */
  collections: string[];
  /** OAuth Scopes */
  /** @default "atproto transition:generic" */
  oauthScope?: string;
  /** Functions that are called before rendering and can modify the content or make other changes. */
  middlewares?: BffMiddleware[];
  /** The root element of the app */
  rootElement?: RootElement;
  /** List of repos to backfill from given the provided collections. Runs on application boot */
  unstable_backfillRepos?: string[];
};

export type EnvConfig = {
  /**
   * The port to serve the app on
   * @default 8080
   */
  port: number;
  /** The URL of the app, used for OAuth */
  publicUrl: string;
  /**
   * The root directory of the app
   * @default process.cwd()
   */
  rootDir: string;
};

export type BffConfig = BffOptions & EnvConfig & {
  /**
   * Directory of lexicon types generated by "@atproto/lex-cli"
   * @default "./__generated__/"
   */
  lexiconDir: string;
  /**
   * The URL of the database, used for SQLite
   * @default ":memory:"
   */
  databaseUrl: string;
  oauthScope: string;
  rootElement: RootElement;
};

export type QueryOptions = {
  orderBy?: {
    field: string;
    direction?: "asc" | "desc";
  };
  where?: Array<{ field: string; equals?: string; contains?: string }>;
};

export type IndexService = {
  getRecords: <T extends Record<string, unknown>>(
    collection: string,
    opts?: QueryOptions,
  ) => T[];
  getRecord: <T extends Record<string, unknown>>(
    uri: string,
  ) => T | undefined;
  insertRecord: (record: RecordTable) => void;
  updateRecord: (record: RecordTable) => void;
  deleteRecord: (uri: string) => void;
  insertActor: (actor: ActorTable) => void;
  getActor: (did: string) => ActorTable | undefined;
  getActorByHandle: (handle: string) => ActorTable | undefined;
};

export type BffContext<State = Record<string, unknown>> = {
  state: State;
  didResolver: DidResolver;
  agent?: Agent;
  createRecord: <T>(
    collection: string,
    data: Partial<T>,
    self?: boolean,
  ) => Promise<void>;
  updateRecord: <T>(
    collection: string,
    rkey: string,
    data: Partial<T>,
  ) => Promise<void>;
  deleteRecord: (collection: string, rkey: string) => Promise<void>;
  backfillRepos: (
    repos: string[],
    collections?: string[],
  ) => Promise<void>;
  indexService: IndexService;
  oauthClient: AtprotoOAuthClient;
  currentUser?: ActorTable;
  cfg: BffConfig;
  next: () => Promise<Response>;
  render: (children: ComponentChildren) => Response;
  html: (vnode: VNode) => Response;
};

export type onSignedInArgs = {
  actor: ActorTable;
  ctx: BffContext;
};

export type OauthMiddlewareOptions = {
  LoginComponent?: FunctionComponent<{ error?: string }>;
  /**
   * Hook that's called when a user logs in
   * @returns {string | undefined} The URL to redirect to after login
   */
  onSignedIn?: (params: onSignedInArgs) => Promise<string | undefined> | void;
};

export type RootProps<T = Record<string, unknown>> = {
  ctx: BffContext<T>;
  children: ComponentChildren;
};

export type HttpMethod =
  | "GET"
  | "POST"
  | "PUT"
  | "DELETE"
  | "PATCH"
  | "HEAD"
  | "OPTIONS";

export type RouteHandler = (
  req: Request,
  params: Record<string, string>,
  ctx: BffContext,
) => Promise<Response> | Response;
